<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!-- 配置组件扫描，作用：扫描com.sc包中的类的组件注解，注册bean对象 -->
    <context:component-scan base-package="com.sc"></context:component-scan>

	<!-- ====================引入外在的数据库属性文件================= -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	

	<!-- =================================================== -->
    <!-- 第一步：配置数据源（连接数据库） -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
	</bean>
	<!-- 第二步：配置会话工厂(获取会话) -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 1、注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- ================2.配置实体类的包路径，给实体类起别名==================== -->
		<property name="typeAliasesPackage" value="com.sc.entity"></property>
		<!-- ================3.sql映射文件==================== -->
		<property name="mapperLocations" value="classpath:com/sc/mapper/*Mapper.xml"></property>
		<!-- ================4、加载mybatis配置文件===================== -->
	    <property name="configLocation" value="classpath:conf.xml"></property>
	</bean>
	
	<!-- 第三步：配置mapper接口扫描 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <!-- 1、mapper接口的包路径 -->
	    <property name="basePackage" value="com.sc.mapper"></property>
	    <!-- 2、会话工厂bean的名称 -->
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
	</bean>

	<!-- 事务的配置 -->
	<!-- 1、配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 2、配置事务属性 -->
	<tx:advice id="txadvice" transaction-manager="transactionManager">
	   <tx:attributes>
	       <!-- 查询方法，不需要事务，并为只读 -->
	      <tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true"/>
	      <tx:method name="select*" propagation="NOT_SUPPORTED" read-only="true"/>
	      <tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true"/>
	      <tx:method name="query*" propagation="NOT_SUPPORTED" read-only="true"/>
	      <!-- 其他方法，需要事务，并为可读写 -->
	      <tx:method name="*" propagation="REQUIRED" read-only="false"/>
	   </tx:attributes>
	</tx:advice>
	<!-- 3、配置aop -->
	<aop:config>
	   <aop:pointcut expression="execution(* com.sc.service..*.*(..))" id="pc"/>
	   <aop:advisor advice-ref="txadvice" pointcut-ref="pc"/>
	</aop:config>
	
</beans>